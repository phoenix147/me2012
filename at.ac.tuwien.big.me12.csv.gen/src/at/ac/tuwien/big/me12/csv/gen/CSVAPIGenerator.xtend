package at.ac.tuwien.big.me12.csv.gen

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.emf.ecore.EObject
import at.ac.tuwien.big.me12.csv.csvmm.FileDefinition 
import at.ac.tuwien.big.me12.csv.csvmm.FieldDefinition
import at.ac.tuwien.big.me12.csv.csvmm.impl.FileDefinitionSetImpl
import at.ac.tuwien.big.me12.csv.csvmm.StaticField
import at.ac.tuwien.big.me12.csv.csvmm.impl.StaticFieldImpl
import at.ac.tuwien.big.me12.csv.csvmm.DerivedField

class CSVAPIGenerator implements IGenerator {
	
	String PACKAGE_PATH = "at/ac/tuwien/big/me12/csv/me/";
	
	String packageName = "at.ac.tuwien.big.me12.csv.me";
	
	String csvLine = "CSVLine";
	String csvFile = "CSVFile";
	String csvWriter = "CSVWriter";
	String csvReader = "CSVReader";
	
	

	override doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(EObject object : resource.contents)
			object.generateClassFiles(fsa)
	}
	
	def generateClassFiles(EObject object, IFileSystemAccess fileSystemAccess){
		if(object instanceof FileDefinitionSetImpl){
			var fileDefinitionSet = object as FileDefinitionSetImpl
			
			for(FileDefinition fileDefinition : fileDefinitionSet.fileDefinitions) {
   				fileSystemAccess.generateFile('''«PACKAGE_PATH»«fileDefinition.name.toFirstUpper»«csvReader».java''', fileDefinition.generateReaderCode);
   				fileSystemAccess.generateFile('''«PACKAGE_PATH»«fileDefinition.name.toFirstUpper»«csvWriter».java''', fileDefinition.generateWriterCode);
   				fileSystemAccess.generateFile('''«PACKAGE_PATH»«fileDefinition.name.toFirstUpper»«csvFile».java''', fileDefinition.generateFileCode);
   				fileSystemAccess.generateFile('''«PACKAGE_PATH»«fileDefinition.name.toFirstUpper»«csvLine».java''', fileDefinition.generateLineCode);
   			}
		}
	}
	def CharSequence generateFileCode(FileDefinition fileDefinition) { 
		var name = fileDefinition.name.toFirstUpper;
		var csvLineName = name+csvLine;
		var className = name+csvFile;
		'''
		package «packageName»;
		
		import java.util.List;
		import «packageName».«csvLineName»;
		
		public class «className» {
			
			public List<«csvLineName»> getLines(){
				return null;
			}
		}
		'''
	}

	def CharSequence generateWriterCode(FileDefinition fileDefinition) {
		var name = fileDefinition.name.toFirstUpper;
		var className = name+csvWriter;
		var csvFileName = name+csvFile;
		'''
		package «packageName»;
		
		import java.io.FileWriter;
		import «packageName».«csvFileName»;
		
		public class «className» {
			
			private FileWriter fileWriter;
			
			public «className»(FileWriter fileWriter){
				this.fileWriter = fileWriter;
			}
			
			public void writeFile(«csvFileName» «csvFileName.toFirstLower», boolean writeDerived){
				
			}
			
		}
		'''		
	}

	def CharSequence generateLineCode(FileDefinition fileDefinition) { 
		var name = fileDefinition.name.toFirstUpper;
		var className = name+csvLine;
		'''
		package «packageName»;
		
		public class «className» {
			
			«FOR fieldDefinition : fileDefinition.fields»
				«IF fieldDefinition instanceof StaticField»
					private «fieldDefinition.fieldType.getName» «fieldDefinition.name.toFirstLower»;
				«ENDIF»
			«ENDFOR»
			
			«FOR fieldDefinition : fileDefinition.fields»
				public «fieldDefinition.fieldType.getName» «IF fieldDefinition.fieldType.getName.equals("Boolean")»is«ELSE»get«ENDIF»«fieldDefinition.name.toFirstUpper»(){
					«createGetterBody(fieldDefinition)»
				}
				«IF fieldDefinition instanceof StaticField»
				«var fieldName = fieldDefinition.name.toFirstLower»
				public void set«fieldDefinition.name.toFirstUpper»(«fieldDefinition.fieldType.getName» «fieldName»){
					this.«fieldName» = «fieldName»;
				}
				«ENDIF»
			«ENDFOR»
			
		}
		'''
	}
	
	def dispatch createGetterBody(StaticField staticField) { 
		'''
			return this.«staticField.name.toFirstLower»;
		'''
	}
	
	def dispatch createGetterBody(DerivedField derivedField){
		'''
			//TODO autogenerated Methodbody
			return null;
		'''
	}

	
	def CharSequence generateReaderCode(FileDefinition fileDefinition) {
		var name = fileDefinition.name.toFirstUpper;
		var className = name+csvReader;
		var csvFileName = name+csvFile;
		'''
		package «packageName»;
		
		import java.io.FileReader;
		import «packageName».«csvFileName»;
		
		public class «className» {
			
			private FileReader fileReader;
			
			public «className»(FileReader fileReader){
				this.fileReader = fileReader;
			}
			
			public «csvFileName» readFile(){
				return null;
			}
		}
		'''
	}
	
}