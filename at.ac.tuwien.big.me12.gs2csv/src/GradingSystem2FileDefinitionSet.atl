-- @path GradingSystem=/at.ac.tuwien.big.me12.gs2csv/model/gradingsystem.ecore
-- @path FileDefinition=/at.ac.tuwien.big.me12.gs2csv/model/csv.ecore

module GradingSystem2FileDefinition;
create OUT : FileDefinition from IN : GradingSystem;

helper def: tasksTaskGroup: Map(GradingSystem!Task, GradingSystem!TaskGroup) = Map{};

helper def: createFileDefinitionName(course: GradingSystem!Course, grading: GradingSystem!Grading ): String = 
	course.name.concat('_').concat(grading.semester).concat('_Gradings')
	;

helper def: createStaticFieldName(taskGroup: GradingSystem!TaskGroup, concreteTask: GradingSystem!ConcreteTask): String =
	taskGroup.name.concat(concreteTask.name).concat(concreteTask.maxPoints)
	;



rule GradingSystem2FileDefinitionSet {
	from
		gs: GradingSystem!GradingSystem
	to
		fds: FileDefinition!FileDefinitionSet
	do {
		for ( c in gs.courses) {
			for ( g in c.gradings) {
				fds.fileDefinitions <- thisModule.NewFileDefinition(c, g);
			}
		}
	}
}

--rule Gradings2FileDefinitions{
--	from
--	    taskGroup: GradingSystem!TaskGroup, concreteTask: GradingSystem!ConcreteTask
--	to
--	    st: FileDefinition!StaticField(
--	    	name <- thisModule.createStaticFieldName(taskGroup, concreteTask),
--			fieldType <- #INTEGER
--	   )
--}


rule CreateStaticField(name: String, type: FileDefinition!FieldType){
	to
	sf : FileDefinition!StaticField (
		fieldType <- type,
		name <- name
	)
	do {
	sf;
 }
}

rule NewFileDefinition(course: GradingSystem!Course, grading: GradingSystem!Grading) {
	to 
		fd : FileDefinition!FileDefinition (
			name <- thisModule.createFileDefinitionName(course, grading)
			)
	do {
		fd.fields <- thisModule.CreateStaticField('StudentRegistrationNumber', #"String");
		fd.fields <- thisModule.CreateStaticField('StudentFirstName', #"String");
		fd.fields <- thisModule.CreateStaticField('StudentLastName', #"String");
		fd;
	}
}

--TODO index fields