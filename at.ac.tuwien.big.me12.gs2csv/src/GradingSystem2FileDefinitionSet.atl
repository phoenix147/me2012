-- @path GradingSystem=/at.ac.tuwien.big.me12.gs2csv/model/gradingsystem.ecore
-- @path FileDefinition=/at.ac.tuwien.big.me12.gs2csv/model/csv.ecore

module GradingSystem2FileDefinition;
create OUT : FileDefinition from IN : GradingSystem;

--helper def: tasksTaskGroup: Map(GradingSystem!Task, GradingSystem!TaskGroup) = Map{};

helper context GradingSystem!Task def: asTaskGroup: GradingSystem!TaskGroup = 
	if self.oclIsTypeOf(GradingSystem!TaskGroup) then 
	self
	else 
		OclUndefined
	endif;

helper context GradingSystem!TaskGroup def: allSubTasks: Sequence(GradingSystem!ConcreteTask) = 
	self.contains->select(t | t.oclIsKindOf(GradingSystem!ConcreteTask)).union(
		self.contains -> select(tg | tg.oclIsKindOf(GradingSystem!TaskGroup)) -> collect(tg | tg.asTaskGroup.allSubTasks) 
	)
	;

helper def: createFileDefinitionName(course: GradingSystem!Course, grading: GradingSystem!Grading ): String = 
	course.name.concat('_').concat(grading.semester).concat('_Gradings')
	;

helper def: createStaticFieldName(taskGroup: GradingSystem!TaskGroup, concreteTask: GradingSystem!ConcreteTask): String =
	taskGroup.name.concat(concreteTask.name).concat(concreteTask.maxPoints)
	;


--rule Gradings2FileDefinitions {
--	from
--		course: GradingSystem!Course, grading: GradingSystem!Grading (course.gradings.includes(grading))
--	to
--		fds: FileDefinition!FileDefinitionSet(
--			fileDefinitions <- course.gradings -- thisModule.NewFileDefinition(course, grading)
--		)
--}
--

rule Grading2FileDefinition{
	from
		course: GradingSystem!Course, grading: GradingSystem!Grading (course.gradings.includes(grading))
	to
		fileDefinition: FileDefinition!FileDefinition(
			name <- thisModule.createFileDefinitionName(course, grading),
			fields <- thisModule.CreateStaticField('StudentRegistrationNumber', #"String"),
			fields <- thisModule.CreateStaticField('StudentFirstName', #"String"),
			fields <- thisModule.CreateStaticField('StudentLastName', #"String"),
			fields <- grading.tasks 
			 -> select(t | t.oclIsTypeOf(GradingSystem!ConcreteTask)).union(
				grading.tasks -> select(tg | tg.oclIsKindOf(GradingSystem!TaskGroup)) -> collect(tg | tg.asTaskGroup.allSubTasks) )
		)
}

rule ConcreteTask2Field{
	from
		concreteTask: GradingSystem!ConcreteTask
	to
		staticField: FileDefinition!StaticField(
--			name <- thisModule.createStaticFieldName(taskGroup, concreteTask),
			name <- concreteTask.name,
		
			fieldType <- #INTEGER
			)
}

rule CreateStaticField(name: String, type: FileDefinition!FieldType){
	to
	sf : FileDefinition!StaticField (
		fieldType <- type,
		name <- name
	)
	do {
	sf;
 }
}

--TODO index fields