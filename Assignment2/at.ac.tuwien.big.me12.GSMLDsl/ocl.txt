-- 1: Alle Grades in einem GradingScheme müssen unterschiedliche requiredPoints haben 
context GradingScheme
inv: self.grades -> forAll(g1,g2 | g1 <> g2 implies g1.requiredPoints <> g2.requiredPoints)

-- 2: concreteTasks müssen maxPoints >= 0 haben
context ConcreteTask
inv: self.maxPoints >= 0

-- 3: eine TaskGroup soll nur aus ConcreteTasks bestehen
context TaskGroup
inv: self.contains -> forAll(t | t.oclIsTypeOf(ConcreteTask))

-- 4: Wenn ein Task Percentage als MinRequirementType hat, muss der Wert 0 <= x <= 100 sein
context Task
inv: if (self.minRequirement.oclIsUndefined()) then true else (self.minRequirement.type = MinRequirementsType::Percentage implies self.minRequirement.value >= 0 and self.minRequirement.value <= 100) endif

-- 5: Wenn ein Task Absolute als MinRequirmentType hat, muss der Wert 0 <= x <= maxPoints sein
context Task
inv: if (self.minRequirement.oclIsUndefined()) then true else (self.minRequirement.type = MinRequirementsType::Absolute implies self.minRequirement.value >= 0 and self.minRequirement.value <= self.maxPoints) endif

-- 6: Wenn eine TaskGroup minRequirementType Absolute hat, dann muss der Wert 0 <= x <= sum(concrecteTasks) sein
context TaskGroup
inv: if (not self.minRequirement.oclIsUndefined()) then (self.minRequirement.type = MinRequirementsType::Absolute implies 
self.minRequirement.value >= 0 and self.minRequirement.value <= (self.contains.oclAsType(ConcreteTask).maxPoints->sum()) else true endif

-- 7: Check für alle grades, dass requieredPoints <= sum(ConcreteTasks.maxPoints)
context Grading
inv: self.gradingScheme.grades -> forAll(g | g.requiredPoints <= (self.tasks.oclAsSet() ->selectByType(ConcreteTask).maxPoints->sum()) + 
(self.tasks.oclAsSet()->selectByType(TaskGroup).contains.oclAsType(ConcreteTask).maxPoints->sum()))