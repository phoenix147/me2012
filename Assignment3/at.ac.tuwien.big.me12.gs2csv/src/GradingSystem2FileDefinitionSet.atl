-- @path GradingSystem=/at.ac.tuwien.big.me12.gs2csv/model/gradingsystem.ecore
-- @path FileDefinition=/at.ac.tuwien.big.me12.gs2csv/model/csv.ecore

module GradingSystem2FileDefinition;
create OUT : FileDefinition from IN : GradingSystem;

--helper def: tasksTaskGroup: Map(GradingSystem!Task, GradingSystem!TaskGroup) = Map{};

helper context GradingSystem!Task def: asTaskGroup: GradingSystem!TaskGroup = 
	if self.oclIsTypeOf(GradingSystem!TaskGroup) then 
		self
	else 
		OclUndefined
	endif;

helper def: parseTaskGroup(taskGroup: GradingSystem!TaskGroup, prefix:String) : Sequence(FileDefinition!StaticField) =  
	taskGroup.contains -> select(t | t.oclIsTypeOf(GradingSystem!ConcreteTask))
		-> collect(t | thisModule.parseTask(t, prefix.concat(taskGroup.name))).union(
		taskGroup.contains -> select(tg | tg.oclIsTypeOf(GradingSystem!TaskGroup))
		-> collect(tg | thisModule.parseTaskGroup(tg, prefix.concat(taskGroup.name)))
		)
	;

helper context GradingSystem!TaskGroup def: allSubTasks: Sequence(GradingSystem!ConcreteTask) = 
	self.contains->select(t | t.oclIsKindOf(GradingSystem!ConcreteTask)).union(
		self.contains -> select(tg | tg.oclIsKindOf(GradingSystem!TaskGroup)) -> collect(tg | tg.asTaskGroup.allSubTasks) 
	)
	;

helper def: createFileDefinitionName(course: GradingSystem!Course, grading: GradingSystem!Grading ): String = 
	course.name.concat('_').concat(grading.semester).concat('_Gradings')
	;

helper def: createStaticFieldName(taskGroup: GradingSystem!TaskGroup, concreteTask: GradingSystem!ConcreteTask): String =
	taskGroup.name.concat(concreteTask.name).concat(concreteTask.maxPoints)
	;

helper def : index :Integer=0;
helper context Integer def : inc(): Integer = self+1;


rule GradingSystem2FileDefinitionSet {
	from
		gradingSystem: GradingSystem!GradingSystem, course: GradingSystem!Course
	to
		fds: FileDefinition!FileDefinitionSet(
			fileDefinitions <- course.gradings
		)
}

rule Grading2FileDefinition{
	from
		course: GradingSystem!Course, grading: GradingSystem!Grading (course.gradings.includes(grading))
	to
		fileDefinition: FileDefinition!FileDefinition(
			name <- thisModule.createFileDefinitionName(course, grading),
			fields <- thisModule.CreateStaticField('StudentRegistrationNumber', #"String"),
			fields <- thisModule.CreateStaticField('StudentFirstName', #"String"),
			fields <- thisModule.CreateStaticField('StudentLastName', #"String"),

			fields <- grading.tasks 
				 -> select(tg | tg.oclIsTypeOf(GradingSystem!TaskGroup)) -> collect(tg | thisModule.parseTaskGroup(tg, '')),
			fields <- grading.tasks 
				-> select(t | t.oclIsTypeOf(GradingSystem!ConcreteTask)) -> collect(t | thisModule.parseTask(t, '')),

			fields <- grading.tasks 
			 -> select(tg | tg.oclIsTypeOf(GradingSystem!TaskGroup)),
			 fields <- thisModule.totalSumField(grading),
			 fields <- grading.gradingScheme
		)
}

rule totalSumField(gs:GradingSystem!Grading){
	to
		af:FileDefinition!AggregationField(
			name <- 'TotalSum',
			fieldType <- #INTEGER,
			aggregatedFields <-thisModule.resolveTemp(gs.tasks->select(t | t.oclIsTypeOf(GradingSystem!ConcreteTask)),'field')	
		)
	do {
		af.index <- thisModule.index;
		thisModule.index <- thisModule.index.inc();
		af;
 }
}



rule GradingScheme2RuleBasedField{
	from
		gs:GradingSystem!GradingScheme
	to
		rf:FileDefinition!RuleBasedField(
			name <- 'Grading',
			fieldType <- #"String",
			rules <- thisModule.MinRequComparisonRule(gs.minRequirementNotFulfilledGrade),
			rules <- gs.grades->sortedBy(g|0-g.requiredPoints)		
		)
	do {
		rf.index <- thisModule.index;
		thisModule.index <- thisModule.index.inc();
	}
}

rule Grade2ComparisonRule{
	from
		g:GradingSystem!Grade
	to
		cr:FileDefinition!ComparisonRule(
			resultValue <- g.name,
			operator <- #GREATER_OR_EQUALS,
			comparisonValue <- g.requiredPoints.toString()
		)	
}

lazy rule MinRequComparisonRule{
	from
		g:GradingSystem!Grade
	to
		cr:FileDefinition!ComparisonRule(
			resultValue <- g.name,
			operator <- #EQUALS,
			comparisonValue <- 'false'
		)	
}


rule TaskGroup2AggField{
	from
		tg:GradingSystem!TaskGroup
	to
		af:FileDefinition!AggregationField(
			name <- tg.name.concat('Sum'),
			fieldType <- #INTEGER,
			aggType <- #SUM,
			aggregatedFields <- thisModule.resolveTemp(tg.allSubTasks,'field')
			
		)
	do {
		af.index <- thisModule.index;
		thisModule.index <- thisModule.index.inc();
	}
}

rule parseTask(task: GradingSystem!ConcreteTask, prefix:String){
	to field:FileDefinition!StaticField (
		name <- prefix.concat(task.name).concat('Points'),
		fieldType <- #INTEGER
	)
	do {
		field.index <- thisModule.index;
		thisModule.index <- thisModule.index.inc();
		field;
	}
}

--rule ConcreteTask2Field{
--	from
--		concreteTask: GradingSystem!ConcreteTask
--	to
--		staticField: FileDefinition!StaticField(
----			name <- thisModule.createStaticFieldName(taskGroup, concreteTask),
--			name <- concreteTask.name,
--		
--			fieldType <- #INTEGER
--			)
--}

rule CreateStaticField(name: String, type: FileDefinition!FieldType){
	to
		sf : FileDefinition!StaticField (
			fieldType <- type,
			name <- name
	)
	do {
		sf.index <- thisModule.index;
		thisModule.index <- thisModule.index.inc();
		sf;
	}
}
